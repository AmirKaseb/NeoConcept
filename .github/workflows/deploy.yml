name: üöÄ Deploy NeoConcept

on:
  push:
    branches: [ devops ]
  workflow_dispatch:

env:
  AWS_REGION: eu-west-3

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
    
    - name: Create S3 Bucket for State (if needed)
      run: |
        # Check if bucket exists, create if not
        if ! aws s3 ls s3://neoconcept-terraform-state 2>/dev/null; then
          echo "Creating S3 bucket for Terraform state..."
          aws s3 mb s3://neoconcept-terraform-state --region eu-west-3
          aws s3api put-bucket-versioning --bucket neoconcept-terraform-state --versioning-configuration Status=Enabled
          aws s3api put-bucket-encryption --bucket neoconcept-terraform-state --server-side-encryption-configuration '{
            "Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]
          }'
          echo "‚úÖ S3 bucket created successfully"
        else
          echo "‚úÖ S3 bucket already exists"
        fi

    - name: Terraform Apply
      working-directory: ./devops
      run: |
        terraform init
        # Try to import existing resources if they exist
        terraform import aws_iam_role.ec2_role neoconcept-ec2-role 2>/dev/null || echo "IAM role not found, will create new one"
        terraform import aws_iam_instance_profile.ec2_profile neoconcept-ec2-profile 2>/dev/null || echo "Instance profile not found, will create new one"
        
        # Try to import existing SSH key pair from AWS
        terraform import aws_key_pair.neoconcept_key neoconcept-key 2>/dev/null || echo "SSH key not found, will create new one"
        
        # Try to import existing EC2 instance
        EXISTING_INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=neoconcept-server" "Name=instance-state-name,Values=running" --query 'Reservations[0].Instances[0].InstanceId' --output text 2>/dev/null || echo "")
        if [ ! -z "$EXISTING_INSTANCE_ID" ] && [ "$EXISTING_INSTANCE_ID" != "None" ]; then
          echo "Found existing instance: $EXISTING_INSTANCE_ID, importing..."
          terraform import aws_instance.neoconcept_server $EXISTING_INSTANCE_ID || echo "Instance import failed, will create new one"
        else
          echo "No existing instance found, will create new one"
        fi
        
        terraform apply -auto-approve
    
    - name: Deploy Application via a SSH
      run: |
        INSTANCE_ID=$(cd devops && terraform output -raw instance_id)
        INSTANCE_IP=$(cd devops && terraform output -raw instance_public_ip)
        echo "Deploying to instance: $INSTANCE_ID at IP: $INSTANCE_IP"
        
        # Wait for instance to be ready
        aws ec2 wait instance-running --instance-ids $INSTANCE_ID
        echo "Instance is running, waiting for SSH..."
        sleep 60
        
        # Deploy via SSH
        echo "Deploying application via SSH..."
        
        # Setup SSH key from GitHub secret
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/amir-publickey
        chmod 600 ~/.ssh/amir-publickey
        
        # Wait for SSH to be ready
        echo "Waiting for SSH to be ready..."
        for i in {1..30}; do
          if ssh -i ~/.ssh/amir-publickey -o StrictHostKeyChecking=no -o ConnectTimeout=10 ubuntu@$INSTANCE_IP "echo 'SSH ready'" 2>/dev/null; then
            echo "‚úÖ SSH is ready!"
            break
          fi
          echo "SSH not ready yet, waiting... (attempt $i/30)"
          sleep 10
        done
        
        # Deploy application
        ssh -i ~/.ssh/amir-publickey -o StrictHostKeyChecking=no ubuntu@$INSTANCE_IP << EOF
          sudo chown -R ubuntu:ubuntu /opt/neoconcept
          cd /opt/neoconcept
          rm -rf NeoConcept || true
          git clone -b devops https://github.com/${{ github.repository }}.git NeoConcept
          cd NeoConcept/devops
          docker-compose down || true
          
          # Create environment file
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > ../backend/.env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> ../backend/.env
          echo "PORT=9595" >> ../backend/.env
          echo "GMAIL=${{ secrets.GMAIL }}" >> ../backend/.env
          echo "GMAIL_APP_PASSWORD=${{ secrets.GMAIL_APP_PASSWORD }}" >> ../backend/.env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> ../backend/.env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> ../backend/.env
          echo "GOOGLE_CALLBACK_URL=${{ secrets.GOOGLE_CALLBACK_URL }}" >> ../backend/.env
          echo "GOOGLE_APPLICATION_CREDENTIALS=${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" >> ../backend/.env
          
          # Build and start containers with better error handling
          echo "Building and starting containers..."
          docker-compose up --build -d
          
          # Wait for containers to start
          echo "Waiting for containers to start..."
          sleep 30
          
          # Check container status
          echo "Container status:"
          docker ps -a
          
          # Check if containers are running
          RUNNING_CONTAINERS=$(docker ps --format "table {{.Names}}" | wc -l)
          if [ "$RUNNING_CONTAINERS" -le 1 ]; then
            echo "‚ùå No containers are running! Application deployment failed!"
            echo "Checking container logs..."
            docker-compose logs
            echo "Checking container health..."
            docker-compose ps
            exit 1
          else
            echo "‚úÖ $((RUNNING_CONTAINERS-1)) container(s) are running successfully!"
          fi
          
          # Wait for health checks to pass
          echo "Waiting for health checks to pass..."
          sleep 60
          
          # Final health check
          echo "Final health check:"
          docker-compose ps
          
          # Check if services are healthy
          UNHEALTHY_SERVICES=$(docker-compose ps --format "table {{.Name}}\t{{.Status}}" | grep -v "healthy" | wc -l)
          if [ "$UNHEALTHY_SERVICES" -gt 1 ]; then
            echo "‚ö†Ô∏è  Some services may not be healthy. Checking logs..."
            docker-compose logs --tail=50
          else
            echo "‚úÖ All services appear to be healthy!"
          fi
          
          echo "‚úÖ Deployment completed!"
        EOF
        
        echo "üéâ Application deployed successfully!"
    
    - name: Get IP
      working-directory: ./devops
      run: |
        echo "üéâ Deployment complete!"
        echo "üåê Your app: $(terraform output -raw application_url)"
        echo "üìç IP: $(terraform output -raw instance_public_ip)"