name: üöÄ Deploy NeoConcept

on:
  push:
    branches: [ devops ]
  workflow_dispatch:

env:
  AWS_REGION: eu-west-3

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
    
    - name: Create S3 Bucket for State (if needed)
      run: |
        # Check if bucket exists, create if not
        if ! aws s3 ls s3://neoconcept-terraform-state 2>/dev/null; then
          echo "Creating S3 bucket for Terraform state..."
          aws s3 mb s3://neoconcept-terraform-state --region eu-west-3
          aws s3api put-bucket-versioning --bucket neoconcept-terraform-state --versioning-configuration Status=Enabled
          aws s3api put-bucket-encryption --bucket neoconcept-terraform-state --server-side-encryption-configuration '{
            "Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]
          }'
          echo "‚úÖ S3 bucket created successfully"
        else
          echo "‚úÖ S3 bucket already exists"
        fi

    - name: Terraform Apply
      working-directory: ./devops
      run: |
        terraform init
        terraform apply -auto-approve
    
    - name: Deploy Application via SSH
      run: |
        INSTANCE_ID=$(cd devops && terraform output -raw instance_id)
        INSTANCE_IP=$(cd devops && terraform output -raw instance_public_ip)
        echo "Deploying to instance: $INSTANCE_ID at IP: $INSTANCE_IP"
        
        # Wait for instance to be ready
        aws ec2 wait instance-running --instance-ids $INSTANCE_ID
        echo "Instance is running, waiting for SSH..."
        sleep 60
        
        # Deploy via SSH using AWS Systems Manager
        echo "Sending deployment command..."
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids $INSTANCE_ID \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=[
            "cd /opt/neoconcept",
            "rm -rf NeoConcept || true",
            "git clone -b devops https://github.com/${{ github.repository }}.git NeoConcept",
            "cd NeoConcept",
            "cd devops",
            "docker-compose down || true",
            "docker-compose up --build -d"
          ]' \
          --comment "Deploy NeoConcept Application" \
          --query 'Command.CommandId' --output text)
        
        echo "Command ID: $COMMAND_ID"
        echo "Waiting for deployment to complete..."
        
        # Wait for command to complete
        aws ssm wait command-executed \
          --command-id $COMMAND_ID \
          --instance-id $INSTANCE_ID
        
        # Get command output
        echo "Getting deployment logs..."
        aws ssm get-command-invocation \
          --command-id $COMMAND_ID \
          --instance-id $INSTANCE_ID \
          --query 'StandardOutputContent' --output text
        
        # Check if command succeeded
        STATUS=$(aws ssm get-command-invocation \
          --command-id $COMMAND_ID \
          --instance-id $INSTANCE_ID \
          --query 'Status' --output text)
        
        echo "Deployment status: $STATUS"
        
        if [ "$STATUS" != "Success" ]; then
          echo "‚ùå Deployment failed!"
          echo "Error output:"
          aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id $INSTANCE_ID \
            --query 'StandardErrorContent' --output text
          exit 1
        else
          echo "‚úÖ Deployment successful!"
        fi
    
    - name: Get IP
      working-directory: ./devops
      run: |
        echo "üéâ Deployment complete!"
        echo "üåê Your app: $(terraform output -raw application_url)"
        echo "üìç IP: $(terraform output -raw instance_public_ip)"